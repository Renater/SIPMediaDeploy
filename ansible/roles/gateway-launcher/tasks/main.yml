---
- name: Install pip requirements for the Python Launcher
  become: true
  ansible.builtin.pip:
    name: web.py=={{ webpy_package_version }}
    state: present

- name: Pull the SIP Media Gateway Docker image
  become: true
  community.docker.docker_image:
    name: "{{ gateway_image }}"
    state: present
    source: pull

- name: Copy the Launcher deployment files
  become: true
  ansible.builtin.copy:
    src: "{{ gateway_launcher_file }}"
    dest: "{{ gateway_launcher_directory }}/{{ gateway_launcher_file }}"
    owner: "{{ gateway_launcher_user }}"
    group: "{{ gateway_launcher_user }}"
    mode: 0644
  loop:
    - HTTPLauncher.py
    - docker-compose.yml
    - pm2-ecosystem.yml
  loop_control:
    loop_var: gateway_launcher_file

- name: Copy the Launcher script
  become: true
  ansible.builtin.template:
    src: SIPMediaGW.sh.j2
    dest: "{{ gateway_launcher_directory }}/SIPMediaGW.sh"
    owner: "{{ gateway_launcher_user }}"
    group: "{{ gateway_launcher_user }}"
    mode: 0755

- name: Configure the Launcher
  become: true
  ansible.builtin.template:
    src: sipmediagw.cfg.j2
    dest: "{{ gateway_launcher_directory }}/sipmediagw.cfg"
    owner: "{{ gateway_launcher_user }}"
    group: "{{ gateway_launcher_user }}"
    mode: 0600

- name: Start the HTTP Launcher with pm2
  ansible.builtin.include_tasks: pm2.yml

- name: Flush handlers
  ansible.builtin.meta: flush_handlers

- name: Launch as many Gateways as possible on host
  ansible.builtin.uri:
    url: http://localhost:8080/sipmediagw
  register: launcher_response
  until: launcher_response.failed or launcher_response.json.res != "ok"
  retries: "{{ start_gateways_maximum }}"
  delay: 20
  failed_when: launcher_response.failed or (launcher_response.json.res != "ok" and launcher_response.json.type != "No free resources found")
  changed_when: launcher_response.attempts > 1
  when: start_gateways_at_execution
